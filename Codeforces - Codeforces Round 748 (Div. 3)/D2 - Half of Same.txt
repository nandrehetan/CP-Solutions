#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

void solve() {
        int t;
        cin >> t;
        while (t--) {
                int n;
                cin >> n;
                vector<int> arr(n);
                map<int, int> m;
                for (int i = 0; i < n; i++) {
                        cin >> arr[i];
                        m[arr[i]]++;
                }
                vector<pair<int, int>> v;
                for (auto i : m)
                        v.push_back(i);
                int ans = 0;
                for (int i = 0; i < v.size(); i++) {
                        if (v[i].second >= n / 2) {
                                ans = 1e9;
                                break;
                        }
                        vector<int> multiples(2000001, v[i].second);
                        for (int j = i + 1; j < v.size(); j++) {
                                int val = v[j].first - v[i].first;
                                for (int k = 1; k * k <= val; k++) {
                                        if (val % k == 0) {
                                                multiples[k] += v[j].second;
                                                if (k != val / k)
                                                        multiples[val / k] += v[j].second;
                                        }
                                }
                        }
                        for (int j = 2000000; j >= 1; j--) {
                                if (multiples[j] >= n / 2) {
                                        ans = max(ans, j);
                                        break;
                                }
                        }
                }
                cout << (ans == 1e9 ? -1LL : ans) << endl;
        }
}

int main() {
        solve();
        return 0;
}
